name: Deploy Components
run-name: deploy ${{ github.event.head_commit.message || inputs.recompile }}

on:
  push:
    paths:
      - "**.scss"
      - "*.js"
      - "*.html"
      - "*.shtm"
  workflow_dispatch:
    inputs:
      recompile:
        description: 'Source file to recompile'
        required: true
        type: string
      debug:
        description: 'Record video for debugging'
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  compile:
    uses: ./.github/workflows/compile.yml
    with:
      recompile: ${{ inputs.recompile }}
    secrets: inherit
  deploy:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: compile
    container:
      image: mcr.microsoft.com/playwright/python:v${{ vars.PLAYWRIGHT_VERSION }}
      options: --user 1001
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install playwright==${{ vars.PLAYWRIGHT_VERSION }} pytest-playwright
      - uses: actions/download-artifact@v4
        with:
          name: compile-${{ github.sha }}
          path: artifacts
      - name: Set debug environment variable
        if: ${{ github.event.inputs.debug == 'true' }}
        run: echo "DEBUG=${{ github.event.inputs.debug }}" >> $GITHUB_ENV
      - name: Login with Playwright
        id: login
        env:
          ADMIN_BASE_URL: ${{ secrets.ADMIN_BASE_URL }}
          USERNAME: ${{ secrets.ADMIN_USERNAME }}
          PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: |
          python .github/workflows/deploy.py --login
        continue-on-error: true
      - uses: step-security/wait-for-secrets@v1
        id: wait-for-secrets
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          secrets: |
            LIBAPPS_MFA_TOKEN: 
              name: 'LibApps MFA Token from email'
      - name: Deploy with Playwright
        id: deploy
        env:
          ADMIN_BASE_URL: ${{ secrets.ADMIN_BASE_URL }}
          LIBAPPS_MFA_TOKEN: ${{ steps.wait-for-secrets.outputs.LIBAPPS_MFA_TOKEN }}
          GROUPS: ${{ secrets.LIBGUIDES_GROUPS }}
        run: |
          python .github/workflows/deploy.py
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        if: ${{ github.event.inputs.debug == 'true' }}
        with:
          name: deploy-${{ github.sha }}
          path: debug
      - if: steps.deploy.outcome != 'success'
        run: exit 1
