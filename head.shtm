<!--BEGIN: head.shtm
  Last Modified: 2022-06-06 21:43:25

  INSTRUCTIONS:
  Run '/bin/sh build.sh head system' to create the system head asset.

  NOTE: The code in this file must be included on both guide edit pages and
  public pages. It relies on Bootstrap CSS and JS code. LibGuides includes
  Bootstrap in its own edit page stylesheets, so our customized Bootstrap code
  must only be included on public pages to avoid breaking the edit interface.

  Additionally, the following <link> and <script> tags must be added into the
  Custom JS/CSS Code boxes for each Group:
  <link rel="stylesheet" type="text/css" href="//libapps.s3.amazonaws.com/sites/64/include/bootstrap.min.css">
  <script type="text/javascript" src="//libapps.s3.amazonaws.com/sites/64/include/bootstrap.min.js"></script>
-->
<link id="c3-bootstrap-css" rel="stylesheet" href="//libapps.s3.amazonaws.com/sites/64/include/bootstrap.min.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Hind:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<!-- TODO identify critical styles for internal stylesheet -->
<!--#include file='custom.scss' -->
<script>// context hacks
  document.addEventListener("DOMContentLoaded", function(event) {
    if (document.getElementById("s-lg-admin-command-bar")) {
      var admin = true;
      console.log("‼️ ADMIN");
      // remove elements that conflict with the LibGuides admin UI
      document.getElementById("c3-custom-styles").remove();
      document.getElementById("c3-bootstrap-css").remove();
    }
    else {
      var _public = true;
      console.log("‼️ PUBLIC");
      // add customized Bootstrap source to public-facing pages
      const bootstrap_js = document.createElement("script");
      bootstrap_js.src = "//libapps.s3.amazonaws.com/sites/64/include/bootstrap.min.js";
      document.head.appendChild(bootstrap_js);
      // hide admin-only elements from public-facing pages
      // see https://stackoverflow.com/a/54819633 regarding fancy syntax
      [...document.getElementsByClassName("c3-public-hide")].forEach(e => e.classList.add("hidden"));
      // move the breadcrumbs where we want them
      document.getElementById("c3-breadcrumbs").appendChild(document.getElementById("s-lib-bc"));
      // hours widget script cannot be included in footer code nor on admin pages
      $(function(){
        var s_lc_tdh_3271_0 = new $.LibCalTodayHours( $("#s_lc_tdh_3271_0"), { iid: 3271, lid: 0 });
      });
      // grab tokenized login link and rebuild elsewhere
      const login_link = document.createElement("a");
      login_link.setAttribute("href", document.getElementById("s-lib-footer-login-link").getElementsByTagName("a")[0].getAttribute("href"));
      login_link.setAttribute("aria-label", "Staff Login");
      login_link.innerHTML = `<i class="glyphicon glyphicon-log-in" aria-hidden="true"></i>`;
      document.getElementById("c3-footer-login").appendChild(login_link);
    }
    if (document.getElementById("tpl-web")) {
      if (document.getElementById("s-lg-guide-tabs") && !document.getElementById("s-lg-guide-tabs").firstElementChild.firstElementChild.classList.contains("active")) {
        var content = true;
        console.log("‼️ CONTENT");
        // hide landing-only elements from content pages
        [...document.getElementsByClassName("c3-content-hide")].forEach(e => e.classList.add("hidden"));
      }
      else {
        var landing = true;
        console.log("‼️ LANDING");
        // hide content-only elements from landing pages
        [...document.getElementsByClassName("c3-landing-hide")].forEach(e => e.classList.add("hidden"));
      }
    }
    if (document.getElementById("s-lg-blog-content")) {
      var blog = true;
      console.log("‼️ BLOG");
    }
    // COMPLEX CONDITIONS
    if (_public && document.getElementById("tpl-a-home")) {
      console.log("‼️ ARCHIVES HOME");
      const widget = document.getElementById("s-lg-widget-1653629897969");
      const config = { childList: true, subtree: true };
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          observer.disconnect();
          console.log(mutation.type);
          var items = widget.getElementsByTagName("ul")[0].getElementsByTagName("li");
          for (var i = 0; i < items.length; i++) {
            items[i].setAttribute("id", `blogpost${[i]}`);
            console.log(items[i]);
            let title_link = items[i].getElementsByTagName("a")[0];
            console.log(title_link);
            let post_date = items[i].getElementsByTagName("span")[0];
            console.log(post_date);
            let first_img = items[i].getElementsByTagName("img")[0];
            console.log(first_img);
            // TODO account for no p
            // TODO account for br inside p
            let first_p = items[i].getElementsByTagName("p")[0];
            console.log(first_p);
            // create element
            items[i].innerHTML = "";
            if (first_img) {
              first_img.removeAttribute("align");
              first_img.removeAttribute("border");
              first_img.removeAttribute("height");
              first_img.removeAttribute("hspace");
              first_img.removeAttribute("vspace");
              first_img.removeAttribute("width");
              first_img.setAttribute("id", `img${i}`);
              items[i].innerHTML += first_img.outerHTML;
            }
            title_link.removeAttribute("target");
            items[i].innerHTML += `<h3>${title_link.outerHTML}</h3>`;
            items[i].innerHTML += `<div class="text-secondary">${post_date.textContent}</div>`;
            items[i].innerHTML += `<p>${first_p.textContent}</p>`;
          }
          // NOTE images are not loaded by the end of the mutation observation
          // TODO refactor as DRY code
          img0 = document.getElementById("img0");
          if (img0) {
            img0.addEventListener("load", function() {
              console.log(img0.naturalWidth);
              console.log(img0.naturalHeight);
              if (img0.naturalWidth <= 240) {
                img0.classList.add("pull-right");
              }
              else {
                img0.classList.add("center-block");
              }
            });
          }
          img1 = document.getElementById("img1");
          if (img1) {
            img1.addEventListener("load", function() {
              console.log(img1.naturalWidth);
              console.log(img1.naturalHeight);
              if (img1.naturalWidth <= 240) {
                img1.classList.add("pull-left");
              }
              else {
                img1.classList.add("center-block");
              }
            });
          }
          img2 = document.getElementById("img2");
          if (img2) {
            img2.addEventListener("load", function() {
              console.log(img2.naturalWidth);
              console.log(img2.naturalHeight);
              if (img2.naturalWidth <= 240) {
                img2.classList.add("pull-right");
              }
              else {
                img2.classList.add("center-block");
              }
            });
          }
        });
      });
      observer.observe(widget, config);
    }
    else if (admin && landing) {}
    else if (admin && content) {}
    // else if (admin && blog) {} // custom <HEAD> code not added on blog admin
    else if (_public && landing) {
      // identify public-facing landing pages to CSS
      document.body.classList.add("c3-landing");
    }
    else if (_public && content) {
      document.body.classList.add("c3-content");
      // remove the 'active' class from a dropdown parent if a child is active
      if (document.getElementById("c3-sidenav").getElementsByClassName("active dropdown")[0]) {
        if (document.getElementById("c3-sidenav").getElementsByClassName("active dropdown")[0].getElementsByClassName("active")[1]) {
          document.getElementById("c3-sidenav").getElementsByClassName("active dropdown")[0].classList.remove("active");
        }
      }
      // expand nested lists by removing dropdown classes
      [...document.getElementById("c3-sidenav").getElementsByClassName("dropdown")].forEach(e => e.classList.remove("dropdown", "clearfix"));
      [...document.getElementById("c3-sidenav").getElementsByClassName("pull-left")].forEach(e => e.classList.remove("pull-left"));
      [...document.getElementById("c3-sidenav").getElementsByClassName("dropdown-menu")].forEach(e => e.classList.remove("dropdown-menu"));
      [...document.getElementById("c3-sidenav").getElementsByClassName("dropdown-toggle")].forEach(e => e.remove());
    }
    else if (_public && blog) {
      document.getElementById("s-lib-scroll-top").remove();
      // TODO on blog list this row-to-delete loads after this script
      document.querySelector("#s-lg-blog-content > .row:last-of-type").remove();    }
  });
</script>
<script>// megamenu click handling
  // TODO only run this on public pages
  $(document).ready(function() {
    $('.dropdown').on({
      "click": function(e) { // handles click event
        // if dropdown or any child of dropdown is clicked
        if ($(e.target).is('.dropdown-menu') || $(e.target).parents().is('.dropdown-menu')) {
          this.closable = false // do not close it
          return;
        } else {
          this.closable = true; // else close it
        }
      },
      "hide.bs.dropdown": function() {
        return this.closable;
      } // save state
    });
  }); // ready
</script>
<!--END: head.shtm-->
